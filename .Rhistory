head(p)
ggplot(p, aes(Var1, Var2, fill = Freq))
ggplot(p, aes(Var1, Var2, fill = Freq)) +
scale_fill_gradient()
ggplot(p, aes(Var1, Var2))
heatmap(table(soccer.data$FTHG, soccer.data$FTAG), col = cm.colors(256))
install.packages(rsample)
View(soccer.data)
# Ahora investigarás la dependencia o independencia del número de goles anotados por el equipo de casa y el número de goles anotados por el equipo visitante mediante un procedimiento denominado bootstrap, revisa bibliografía en internet para que tengas nociones de este desarrollo.
sd(soccer.data$FTHG)
# Ahora investigarás la dependencia o independencia del número de goles anotados por el equipo de casa y el número de goles anotados por el equipo visitante mediante un procedimiento denominado bootstrap, revisa bibliografía en internet para que tengas nociones de este desarrollo.
mean(soccer.data$FTHG); sd(soccer.data$FTHG)
# Ahora investigarás la dependencia o independencia del número de goles anotados por el equipo de casa y el número de goles anotados por el equipo visitante mediante un procedimiento denominado bootstrap, revisa bibliografía en internet para que tengas nociones de este desarrollo.
mean(soccer.data$FTHG); sd(soccer.data$FTHG)
mean(soccer.data$FTAG); sd(soccer.data$FTAG)
for(i in 1:1140) {
muestra = sample(soccer.data$FTHG, replace = T)
medias[i] = mean(muestra)
}
medias = numeric(1140)
for(i in 1:1140) {
muestra = sample(soccer.data$FTHG, replace = T)
medias[i] = mean(muestra)
}
hist(medias)
# Ya hemos estimado las probabilidades conjuntas de que el equipo de casa anote X=x goles (x=0,1,... ,8), y el equipo visitante anote Y=y goles (y=0,1,... ,6), en un partido.
# Obtén una tabla de cocientes al dividir estas probabilidades conjuntas por el producto de las probabilidades marginales correspondientes.
table(soccer.data$FTHG, soccer.data$FTAG)
# Ya hemos estimado las probabilidades conjuntas de que el equipo de casa anote X=x goles (x=0,1,... ,8), y el equipo visitante anote Y=y goles (y=0,1,... ,6), en un partido.
# Obtén una tabla de cocientes al dividir estas probabilidades conjuntas por el producto de las probabilidades marginales correspondientes.
round(table(soccer.data$FTHG)/dim(soccer.data)[1], 3)
table(soccer.data$FTHG)
PMFTAG <- round(table(soccer.data$FTAG)/dim(soccer.data)[1], 3)
PMFTAG
PMFTG <- table(PMFTHG, PMFTAG)
# Ya hemos estimado las probabilidades conjuntas de que el equipo de casa anote X=x goles (x=0,1,... ,8), y el equipo visitante anote Y=y goles (y=0,1,... ,6), en un partido.
# Obtén una tabla de cocientes al dividir estas probabilidades conjuntas por el producto de las probabilidades marginales correspondientes.
PMFTHG <- round(table(soccer.data$FTHG)/dim(soccer.data)[1], 3)
PMFTG <- table(PMFTHG, PMFTAG)
PMFTG <- round(table(soccer.data$FTHG, soccer.data$FTAG)/dim(soccer.data)[1], 3)
View(PMF)
View(PMFTG)
View(table(soccer.data$FTHG, soccer.data$FTAG))
View(PMFTG)
PMFTG
?mutate
# Ya hemos estimado las probabilidades conjuntas de que el equipo de casa anote X=x goles (x=0,1,... ,8), y el equipo visitante anote Y=y goles (y=0,1,... ,6), en un partido.
# Obtén una tabla de cocientes al dividir estas probabilidades conjuntas por el producto de las probabilidades marginales correspondientes.
PMFTHG <- round(table(soccer.data$FTHG) / dim(soccer.data)[1], 3)
PMFTAG <- round(table(soccer.data$FTAG) / dim(soccer.data)[1], 3)
PMFTG <- round(table(soccer.data$FTHG, soccer.data$FTAG) / dim(soccer.data)[1], 3)
PMFTHG; PMFTAG; PMFTG
class(PMFTHG)
View(as.matrix(PMFTHG))
as.matrix(PMFTG)
dim(PMFTG)
dim(PMFTG)[1]
# Ya hemos estimado las probabilidades conjuntas de que el equipo de casa anote X=x goles (x=0,1,... ,8), y el equipo visitante anote Y=y goles (y=0,1,... ,6), en un partido.
# Obtén una tabla de cocientes al dividir estas probabilidades conjuntas por el producto de las probabilidades marginales correspondientes.
PMFTHG <- as.matrix(round(table(soccer.data$FTHG) / dim(soccer.data)[1], 3))
PMFTAG <- as.matrix(round(table(soccer.data$FTAG) / dim(soccer.data)[1], 3))
PMFTG <- as.matrix(round(table(soccer.data$FTHG, soccer.data$FTAG) / dim(soccer.data)[1], 3))
for(i in dim(PMFTG)[1]) {
PMFTHG[i][1]
}
for(i in dim(PMFTG)[1]) {
for(j in dim(PMFTG)[2]) {
(PMFTHG[i][j])
}
}
TC = matrix(nrow = 9, ncol = 7)
PMFTHG[1]
TC = matrix(nrow = 9, ncol = 7)
for(i in 0:dim(PMFTG)[1] - 1) {
for(j in 0:dim(PMFTG)[2] - 1) {
TC[i, j] <- PMFTG[i, j] / (PMFTHG[i] * PMFTAG[j])
}
}
PMFTG[0,0]
PMFTG[0]
PMFTG[0][0]
# Ya hemos estimado las probabilidades conjuntas de que el equipo de casa anote X=x goles (x=0,1,... ,8), y el equipo visitante anote Y=y goles (y=0,1,... ,6), en un partido.
# Obtén una tabla de cocientes al dividir estas probabilidades conjuntas por el producto de las probabilidades marginales correspondientes.
PMFTHG <- as.matrix(round(table(soccer.data$FTHG) / dim(soccer.data)[1], 3))
PMFTAG <- as.matrix(round(table(soccer.data$FTAG) / dim(soccer.data)[1], 3))
PMFTG <- as.matrix(round(table(soccer.data$FTHG, soccer.data$FTAG) / dim(soccer.data)[1], 3))
TC = matrix(nrow = 9, ncol = 7)
for(i in 0:dim(PMFTG)[1] - 1) {
for(j in 0:dim(PMFTG)[2] - 1) {
TC[i, j] <- PMFTG[i, j] / (PMFTHG[i] * PMFTAG[j])
}
}
TC
PC <- as.matrix(round(table(soccer.data$FTHG, soccer.data$FTAG) / dim(soccer.data)[1], 3))
# Ya hemos estimado las probabilidades conjuntas de que el equipo de casa anote X=x goles (x=0,1,... ,8), y el equipo visitante anote Y=y goles (y=0,1,... ,6), en un partido.
# Obtén una tabla de cocientes al dividir estas probabilidades conjuntas por el producto de las probabilidades marginales correspondientes.
PMFTHG <- as.matrix(round(table(soccer.data$FTHG) / dim(soccer.data)[1], 3))
PMFTAG <- as.matrix(round(table(soccer.data$FTAG) / dim(soccer.data)[1], 3))
PC <- as.matrix(round(table(soccer.data$FTHG, soccer.data$FTAG) / dim(soccer.data)[1], 3))
TC = matrix(nrow = 9, ncol = 7)
for(i in 0:dim(PMFTG)[1] - 1) {
for(j in 0:dim(PMFTG)[2] - 1) {
TC[i, j] <- PC[i, j] / (PMFTHG[i] * PMFTAG[j])
}
}
dim(PC)
# Ya hemos estimado las probabilidades conjuntas de que el equipo de casa anote X=x goles (x=0,1,... ,8), y el equipo visitante anote Y=y goles (y=0,1,... ,6), en un partido.
# Obtén una tabla de cocientes al dividir estas probabilidades conjuntas por el producto de las probabilidades marginales correspondientes.
PMFTHG <- as.matrix(round(table(soccer.data$FTHG) / dim(soccer.data)[1], 3))
PMFTAG <- as.matrix(round(table(soccer.data$FTAG) / dim(soccer.data)[1], 3))
PC <- as.matrix(round(table(soccer.data$FTHG, soccer.data$FTAG) / dim(soccer.data)[1], 3))
TC = matrix(nrow = 9, ncol = 7)
for(i in 0:dim(PC)[1] - 1) {
for(j in 0:dim(PC)[2] - 1) {
TC[i, j] <- PC[i, j] / (PMFTHG[i] * PMFTAG[j])
}
}
View(PMFTAG)
dim(PC)[2]
PC
TC
TC = matrix(nrow = 9, ncol = 7)
View(TC)
TC <- PC
for(i in 0:dim(PC)[1] - 1) {
for(j in 0:dim(PC)[2] - 1) {
TC[i, j] <- PC[i, j] / (PMFTHG[i] * PMFTAG[j])
}
}
# Ya hemos estimado las probabilidades conjuntas de que el equipo de casa anote X=x goles (x=0,1,... ,8), y el equipo visitante anote Y=y goles (y=0,1,... ,6), en un partido.
# Obtén una tabla de cocientes al dividir estas probabilidades conjuntas por el producto de las probabilidades marginales correspondientes.
PMFTHG <- as.matrix(round(table(soccer.data$FTHG) / dim(soccer.data)[1], 3))
PMFTAG <- as.matrix(round(table(soccer.data$FTAG) / dim(soccer.data)[1], 3))
PC <- as.matrix(round(table(soccer.data$FTHG, soccer.data$FTAG) / dim(soccer.data)[1], 3))
TC <- PC
for(i in 0:dim(PC)[1] - 1) {
for(j in 0:dim(PC)[2] - 1) {
TC[i, j] <- PC[i, j] / (PMFTHG[i] * PMFTAG[j])
}
}
PC
TC
# 1. Importa los datos de soccer de las temporadas 2017/2018, 2018/2019 y 2019/2020 de la primera división de la liga española a R, los datos los puedes encontrar en el siguiente enlace: https://www.football-data.co.uk/spainm.php
data.D1.1718 <- read.csv("https://www.football-data.co.uk/mmz4281/1718/SP1.csv")
data.D1.1819 <- read.csv("https://www.football-data.co.uk/mmz4281/1819/SP1.csv")
data.D1.1920 <- read.csv("https://www.football-data.co.uk/mmz4281/1920/SP1.csv")
# 3. Con la función select del paquete dplyr selecciona únicamente las columnas Date, HomeTeam, AwayTeam, FTHG, FTAG y FTR; esto para cada uno de los data frames. (Hint: también puedes usar lapply).
selected_data.D1.1718 <- dplyr::select(data.D1.1718, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR)
selected_data.D1.1819 <- dplyr::select(data.D1.1819, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR)
selected_data.D1.1920 <- dplyr::select(data.D1.1920, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR)
selected_data.D1.1718 <- dplyr::mutate(selected_data.D1.1718, Date = as.Date(Date, "%d/%m/%y"))
selected_data.D1.1819 <- dplyr::mutate(selected_data.D1.1819, Date = as.Date(Date, "%d/%m/%Y"))
selected_data.D1.1920 <- dplyr::mutate(selected_data.D1.1920, Date = as.Date(Date, "%d/%m/%Y"))
# Con ayuda de la función rbind forma un único data frame que contenga las seis columnas mencionadas en el punto 3 (Hint 2: la función do.call podría ser utilizada).
soccer.data <- rbind(selected_data.D1.1718, rbind(selected_data.D1.1819, selected_data.D1.1920))
# Ya hemos estimado las probabilidades conjuntas de que el equipo de casa anote X=x goles (x=0,1,... ,8), y el equipo visitante anote Y=y goles (y=0,1,... ,6), en un partido.
# Obtén una tabla de cocientes al dividir estas probabilidades conjuntas por el producto de las probabilidades marginales correspondientes.
PMFTHG <- as.matrix(round(table(soccer.data$FTHG) / dim(soccer.data)[1], 3))
PMFTAG <- as.matrix(round(table(soccer.data$FTAG) / dim(soccer.data)[1], 3))
PC <- as.matrix(round(table(soccer.data$FTHG, soccer.data$FTAG) / dim(soccer.data)[1], 3))
TC <- PC
for(i in 0:dim(PC)[1] - 1) {
for(j in 0:dim(PC)[2] - 1) {
TC[i, j] <- PC[i, j] / (PMFTHG[i] * PMFTAG[j])
}
}
View(PC)
View(replicate(n = 1, sample(PC, replace = TRUE)))
PC
replicate(n = 1, sample(PC, replace = TRUE))
mean(PC)
mean(replicate(n = 1, sample(PC, replace = TRUE)))
mean(replicate(n = 10, sample(PC, replace = TRUE)))
mean(replicate(n = 10000, sample(PC, replace = TRUE)))
bootstrap <- replicate(n = 1000, sample(PC, replace = TRUE))
tail(medias)
medias <- apply(bootstrap, MARGIN = 2, FUN = mean)
tail(medias)
mean(PC)
mean(bootstrap)
sqrt(sum((medias-mean(PC))^2)/ncol(bootstrap))
View(bootstrap)
PC
sqrt(63)/sqrt(1000)
sqrt(mean(PC))/sqrt(1000)
sqrt(sum((medias - mean(PC)) ^ 2) / ncol(bootstrap))
sqrt(mean(PC)) / sqrt(1000) #Varianza teorica
mean(PC)
mean(bootstrap)
ggplot() +
geom_histogram(aes(x = medias)) +
geom_vline(xintercept = mean(PC), size = 1, color = "darkred")
suppressMessages(library(dplyr))
library(ggplot2)
ggplot() +
geom_histogram(aes(x = medias)) +
geom_vline(xintercept = mean(PC), size = 1, color = "darkred")
ggplot(type = "l") +
geom_histogram(aes(x = medias)) +
geom_vline(xintercept = mean(PC), size = 1, color = "darkred")
bootstrap <- replicate(n = 1000, sample(PC, replace = TRUE))
medias <- apply(bootstrap, MARGIN = 2, FUN = mean)
sqrt(sum((medias - mean(PC)) ^ 2) / ncol(bootstrap))
sqrt(mean(PC)) / sqrt(1000) #Varianza teorica
ggplot() +
geom_histogram(aes(x = medias)) +
geom_vline(xintercept = mean(PC), size = 1, color = "darkred")
bootstrap <- replicate(n = 1000, sample(PC, replace = TRUE))
medias <- apply(bootstrap, MARGIN = 2, FUN = mean)
ggplot() +
geom_histogram(aes(x = medias)) +
geom_vline(xintercept = mean(PC), size = 1, color = "darkred")
ggplot() +
geom_histogram(aes(x = medias)) +
geom_vline(xintercept = mean(PC), size = 1, color = "darkred")
mean(PC)
PC
apply(PC, MARGIN = 2, mean)
class(medias)
tail(medias)
as.array(PC)
PC
PC + PC
sample(PC, replace = TRUE)
as.matrix(x = sample(PC, replace = TRUE), nrows = 9, ncols = 7)
?as.matrix
as.matrix(x = sample(PC, replace = TRUE), nrow = 9, ncol = 7)
sample(PC, replace = TRUE)
as.matrix(1, nrow = 9, ncol = 7)
as.matrix(1:63, nrow = 9, ncol = 7)
as.matrix(1:63, nrow = 9, ncol = 7, byrow = true)
PC
as.data.frame(sample(PC, replace = TRUE))
PC
as.matrix(PC)
as.array(PC)
PC
PC
as.data.frame(PC)
as.matrix(as.data.frame(PC))
as.array(as.data.frame(PC))
PC
apply(PC, MARGIN = 0)
apply(PC, MARGIN = 1)
apply(PC, MARGIN = 1, FUN = as.array())
library(DBI)
library(RMySQL)
MyDataBase <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
dbListTables(MyDataBase)
dbListFields(MyDataBase, 'City')
DataDB <- dbGetQuery(MyDataBase, "select * from City")
class(DataDB)
head(DataDB)
pop.mean <- mean(DataDB$Population)  # Media a la variable de poblaciÃ³n
pop.mean
pop.3 <- pop.mean *3   # Operaciones aritmÃ©ticas
pop.3
library(dplyr)
pop50.mex <-  DataDB %>% filter(CountryCode == "MEX" ,  Population > 50000)   # Ciudades del paÃ­s de MÃ©xico con mÃ¡s de 50,000 habitantes
head(pop50.mex)
unique(DataDB$CountryCode)   # PaÃ­ses que contiene la BDD
library(dbplyr)
library(pool)
my_db <- dbPool(
RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest"
)
dbListTables(my_db)
my_db %>% tbl("Country") %>% head(5) # library(dplyr)
my_db %>% tbl("CountryLanguage") %>% head(5)
library(DBI)
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
library(DBI)
conn <- dbConnect(
drv = RMySQL::MySQL(),
dbname = "shinydemo",
host = "shiny-demo.csa7qlmguqrf.us-east-1.rds.amazonaws.com",
username = "guest",
password = "guest")
rs <- dbSendQuery(conn, "SELECT * FROM City LIMIT 5;")
dbFetch(rs)
dbClearResult(rs)
dbDisconnect(conn)
library(rjson)            # Quitar comillas del nombre
URL <- "https://tools.learningcontainer.com/sample-json-file.json" # Asignando el link a una variable
JsonData <- fromJSON(file= URL)     # Se guarda el JSon en un objeto de R
class(JsonData)                     # Vemos que tipo de objeto es JsonData
str(JsonData)                       # Vemos la naturaleza de sus variables
sqrt(JsonData$Mobile)
# install.packages("XML")
library(XML)
link <- "http://www-db.deis.unibo.it/courses/TW/DOCS/w3schools/xml/cd_catalog.xml"
# Analizando el XML desde la web
xmlfile <- xmlTreeParse(link)
summary(xmlfile)
head(xmlfile)
#Extraer los valores xml
topxml <- xmlSApply(xmlfile, function(x) xmlSApply(x, xmlValue))
# Colocandolos en un Data Frame
xml_df <- data.frame(t(topxml), row.names= NULL)
xml_df <- data.frame(t(topxml), row.names= NULL)
str(xml_df) # Observar la naturaleza de las variables del DF
xml_df$PRICE <- as.numeric(xml_df$PRICE)
xml_df$YEAR <- as.numeric(xml_df$YEAR)
mean(xml_df$PRICE)
mean(xml_df$YEAR)
data_df <- xmlToDataFrame(link)
head(data_df)
# install.packages("rvest")
library(rvest)
theurl <- "https://solarviews.com/span/data2.htm"
file <- read_html(theurl)    # Leemos el html
tables <- html_nodes(file, "table")
table1 <- html_table(tables[4], fill = TRUE)
table <- na.omit(as.data.frame(table1))   # Quitamos NAÂ´s que meten filas extras
str(table)  # Vemos la naturaleza de las variables
# Extraer la tabla del HTML
file <- read_html("https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm")
tables <- html_nodes(file, "table")
View(tables)
View(tables[1])
table1 <- html_table(tables[1], fill = TRUE)
View(table1)
# Extraer la tabla del HTML
file <- read_html("https://www.glassdoor.com.mx/Sueldos/data-scientist-sueldo-SRCH_KO0,14.htm")
tables <- html_nodes(file, "table")
table <- na.omit(as.data.frame(html_table(tables[1], fill = TRUE)))
View(table)
View(table)
?gsub
# Quitar los caracteres no necesarios de la columna sueldos (todo lo que no sea número), para dejar solamente la cantidad mensual (Hint: la función 'gsub' podría ser de utilidad)
gsub(pattern = "\\D", x = table$Sueldo, replacement = "")
# Quitar los caracteres no necesarios de la columna sueldos (todo lo que no sea número), para dejar solamente la cantidad mensual (Hint: la función 'gsub' podría ser de utilidad)
table$Sueldo <- gsub(pattern = "\\D", x = table$Sueldo, replacement = "")
View(table)
str(table)
Sueldo
table$Sueldo <- as.numeric(table$Sueldo)
View(table)
# Ahora podrás responder esta pregunta, ¿Cuál es la empresa que más paga y la que menos paga?
which.min(x = Sueldo)
# Ahora podrás responder esta pregunta, ¿Cuál es la empresa que más paga y la que menos paga?
which.min(x = table$Sueldo)
# Ahora podrás responder esta pregunta, ¿Cuál es la empresa que más paga y la que menos paga?
table[which.min(x = table$Sueldo)]
# Ahora podrás responder esta pregunta, ¿Cuál es la empresa que más paga y la que menos paga?
table$Cargo[which.max(x = table$Sueldo)]
# Ahora podrás responder esta pregunta, ¿Cuál es la empresa que más paga y la que menos paga?
table$Cargo[which.max(x = table$Sueldo)]
table$Cargo[which.min(x = table$Sueldo)]
# 1. Importa los datos de soccer de las temporadas 2017/2018, 2018/2019 y 2019/2020 de la primera división de la liga española a R, los datos los puedes encontrar en el siguiente enlace: https://www.football-data.co.uk/spainm.php
data.D1.1718 <- read.csv("https://www.football-data.co.uk/mmz4281/1718/SP1.csv")
data.D1.1819 <- read.csv("https://www.football-data.co.uk/mmz4281/1819/SP1.csv")
data.D1.1920 <- read.csv("https://www.football-data.co.uk/mmz4281/1920/SP1.csv")
# 3. Con la función select del paquete dplyr selecciona únicamente las columnas Date, HomeTeam, AwayTeam, FTHG, FTAG y FTR; esto para cada uno de los data frames. (Hint: también puedes usar lapply).
selected_data.D1.1718 <- dplyr::select(data.D1.1718, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR)
selected_data.D1.1819 <- dplyr::select(data.D1.1819, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR)
selected_data.D1.1920 <- dplyr::select(data.D1.1920, Date, HomeTeam, AwayTeam, FTHG, FTAG, FTR)
selected_data.D1.1718 <- dplyr::mutate(selected_data.D1.1718, Date = as.Date(Date, "%d/%m/%y"))
selected_data.D1.1819 <- dplyr::mutate(selected_data.D1.1819, Date = as.Date(Date, "%d/%m/%Y"))
selected_data.D1.1920 <- dplyr::mutate(selected_data.D1.1920, Date = as.Date(Date, "%d/%m/%Y"))
# Con ayuda de la función rbind forma un único data frame que contenga las seis columnas mencionadas en el punto 3 (Hint 2: la función do.call podría ser utilizada).
soccer.data <- rbind(selected_data.D1.1718, rbind(selected_data.D1.1819, selected_data.D1.1920))
# - La probabilidad (conjunta) de que el equipo que juega en casa anote x goles y el equipo que juega como visitante anote y goles (x=0,1,2,, y=0,1,2,)
(PCFTG <- table(soccer.data$FTHG, soccer.data$FTAG) / dim(soccer.data)[1])
table(soccer.data$FTHG, soccer.data$FTAG)
shiny::runApp('C:/Users/Ricardo Estrada/Downloads/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-01')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Ejemplos/Ejemplo #1/ejemplo1')
runApp('C:/Users/Ricardo Estrada/Downloads/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-01')
runApp('C:/Users/Ricardo Estrada/Downloads/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-02')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #1/reto_1')
runApp('C:/Users/Ricardo Estrada/Downloads/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-02')
runApp('C:/Users/Ricardo Estrada/Downloads/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-02')
head(mtcars)
head(iris)
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #1/reto_1')
runApp()
head(iris)
rownames(iris)
iris %>% filter(str_detect(Species = "setosa"))
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #1/reto_1')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #1/reto_1')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #1/reto_1')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #1/reto_1')
runApp('C:/Users/Ricardo Estrada/Downloads/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-03')
head(airquality)
head(airquality[, 1:4])
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #2/R2')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #2/R2')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #2/R2')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #2/R2')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #2/R2')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #2/R2')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #2/R2')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #2/R2')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #2/R2')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #2/R2')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #2/R2')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #2/R2')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #2/R2')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #2/R2')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #2/R2')
runApp('C:/Users/Ricardo Estrada/Desktop/Etapa 2/Sesión #8/Retos/Reto #2/R2')
runApp('C:/Users/Ricardo Estrada/Downloads/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-05')
setwd("~/GitHub/Analisis_Alzheimer")
shiny::runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
runApp('C:/Users/Ricardo Estrada/Downloads/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-05')
# install.packages('tidyverse')
library(ggplot2)
# install.packages('dplyr')
library(dplyr)
# Lectura de Datos de los Archivos
cross_sectional <- read.csv('oasis_cross-sectional.csv')
longitudinal <- read.csv('oasis_longitudinal.csv')
str(longitudinal %>% select(-Hand))
View(longitudinal)
longitudinal %>%
mutate(M.F = ifelse(M.F == 'F', 'Femenino', 'Masculino')) %>%
select(- MR.Delay, - Hand, - eTIV:ASF)
longitudinal %>%
mutate(M.F = ifelse(M.F == 'F', 'Femenino', 'Masculino')) %>%
select(- MR.Delay, - Hand, - eTIV, - nWBV, - ASF)
View(longitudinal)
runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
View(cross_sectional)
graph.data <- longitudinal %>%
filter(Group == "Converted") %>%
ggplot(aes(x = Visit, y = CDR, group = Subject.ID, color = Subject.ID)) +
geom_line() +
geom_point() +
xlim(min(longitudinal$Visit), max(longitudinal$Visit)) +
ylim(min(CDR), max(CDR)) +
facet_wrap(~ M.F) +
ggtitle('Enfermedad de Alzheimer', subtitle = 'Deterioro del Estado Mental') +
ylab('Mini Examen del Estado Mental') +
xlab('Número de Visita') +
transition_reveal(Visit)
View(longitudinal)
graph.data <- longitudinal %>%
filter(Group == "Converted") %>%
ggplot(aes(x = Visit, y = CDR, group = Subject.ID, color = Subject.ID)) +
geom_line() +
geom_point() +
xlim(min(longitudinal$Visit), max(longitudinal$Visit)) +
ylim(min(CDR), max(CDR)) +
facet_wrap(~ M.F) +
ggtitle('Enfermedad de Alzheimer', subtitle = 'Deterioro del Estado Mental') +
ylab('Mini Examen del Estado Mental') +
xlab('Número de Visita') +
transition_reveal(Visit)
graph.data <- longitudinal %>%
filter(Group == "Converted") %>%
ggplot(aes(x = Visit, y = CDR, group = Subject.ID, color = Subject.ID)) +
geom_line() +
geom_point() +
xlim(min(longitudinal$Visit), max(longitudinal$Visit)) +
#ylim(min(CDR), max(CDR)) +
facet_wrap(~ M.F) +
ggtitle('Enfermedad de Alzheimer', subtitle = 'Deterioro del Estado Mental') +
ylab('Mini Examen del Estado Mental') +
xlab('Número de Visita') +
transition_reveal(Visit)
# install.packages('gganimate')
library(gganimate)
graph.data <- longitudinal %>%
filter(Group == "Converted") %>%
ggplot(aes(x = Visit, y = CDR, group = Subject.ID, color = Subject.ID)) +
geom_line() +
geom_point() +
xlim(min(longitudinal$Visit), max(longitudinal$Visit)) +
#ylim(min(CDR), max(CDR)) +
facet_wrap(~ M.F) +
ggtitle('Enfermedad de Alzheimer', subtitle = 'Deterioro del Estado Mental') +
ylab('Mini Examen del Estado Mental') +
xlab('Número de Visita') +
transition_reveal(Visit)
animate(graph.data, renderer = gifski_renderer('CDRvsVisit.gif'))
runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
runApp('C:/Users/Ricardo Estrada/Downloads/Programacion-con-R-Santander-master/Sesion-08/Ejemplo-05')
runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
runApp('shinyapp/Alzheimer')
